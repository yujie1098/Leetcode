*** Tree ***
待做：
    -513
    -23
    -257
    -105
    -106
    -501
    -236
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
** 满二叉树 **
    每个节点都有两个子节点，除了叶子节点外，所有的层都是完全填满的
    满二叉树一定是完全二叉树
    深度为k，有2^k-1个节点
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
** 完全二叉树 **
    对于除了最底层之外的其他层，都是满的，即除了可能缺失节点的最后一层外，其他层都是满的。
    所有的叶子节点都集中在树的底部两层，最后一层的叶子节点都尽可能地靠左排列。
    应用：
        优先级队列就是一个堆，堆就是一个完全二叉树，同时保证父子节点的顺序关系。
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
** 平衡二叉树 **
    左右子树的高度差不超过1
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
** Binary Search Tree BST **
    二叉搜索树是有数值的
    二叉搜索树是一个有序树
    BST每个节点的值都大于其左子树中任何节点的值，且小于其右子树中任何节点的值
        1.若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；
        2.若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；
        3.它的左、右子树也分别为二叉排序树


    ** Balanced Binary Search Tree **
        是一种二叉搜索树,它通过在插入或删除节点时进行自动调整，以保持树的高度平衡
        它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树
        常见的平衡二叉搜索树
            Adelson-Velsky and Landis AVL树
            红黑树
            Splay树
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
** Tree Store method **
      * linked storage *
        用指针
        常用遍历方式
      * sequential storage *
        用数组
        也可以用，但是不常用
        如果父节点的数组下标是 i，那么它的左孩子就是 i * 2 + 1，右孩子就是 i * 2 + 2。
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
** Traversal Method **
    1.Depth-First Traversal(Recursive Method, Iterative Method)
        从根节点开始，沿着一条路径尽可能深地访问树的节点，直到到达叶子节点，然后回溯并继续探索其他分支
        用递归做更简单
            分类：这里pre-in-post指的就是root的位置
            1.1.Preorder Traversal
                根-左-右
                从根节点开始，先访问根节点，然后递归地对左子树进行前序遍历，最后递归地对右子树进行前序遍历。
            1.2.Inorder Traversal
                左-根-右
                从根节点开始，先递归地对左子树进行中序遍历，然后访问根节点，最后递归地对右子树进行中序遍历
            1.3.Postorder Traversal
                左-右-根
                从根节点开始，先递归地对左子树进行后序遍历，然后递归地对右子树进行后序遍历，最后访问根节点
    2.Breadth-First Traversal(Iterative Method)
        从根节点开始，逐层访问树的节点，先访问根节点，然后依次访问它的所有子节点，再依次访问子节点的子节点，以此类推，直到遍历完整棵树
            2.1.Level Order traversal
                按照从上到下、从左到右的顺序逐层访问二叉树的节点
                广度优先遍历的实现一般使用队列来实现，这也是队列先进先出的特点所决定的，因为需要先进先出的结构，才能一层一层的来遍历二叉树

----------------------------------------------
* Recursive Method *
    递归法是一种通过调用自身函数来解决问题的方法
    在递归函数中，问题被分解成更小的子问题，直到达到基本情况（递归终止条件），然后逐层返回结果，最终得到问题的解。=
    ♟️步骤：
        1.确定递归函数的参数和返回值
            在写递归方法的过程中，确定哪些参数是递归的过程中需要处理的
            并且明确每次递归的返回值是什么进而确定递归函数的返回类型
        2.确定终止条件
            操作系统是用一个栈的结构来保存每一层递归的信息，如果递归没有终止，操作系统的内存栈必然就会溢出。
        3.确定单层递归的逻辑
            确定每一层递归需要处理的信息。在这里也就会重复调用自己来实现递归的过程。
    时间复杂度：
        递归深度*每次递归调用的时间复杂度
    应用场景：
        递归法通常使用于问题可以自然地分解为相同形式的子问题的情况
            例如：
                树的遍历
                动态规划

* Iterative Method *
    迭代法是一种通过循环来解决问题的方法。
    在迭代过程中，通过不断重复执行某一段代码，逐步推进问题的解决，直到达到终止条件。
    迭代法通常使用于可以通过循环实现的问题，例如数组遍历、栈和队列操作等。
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
** Depth-First Traversal **
    常用于遍历树或图的算法
    从根节点开始，沿着一条路径尽可能深地访问树的节点，直到到达叶子节点，然后回溯并继续探索其他分支
** Breadth-First Traversal **
    常用于遍历树或图的算法
    从根节点开始，逐层访问树的节点，先访问根节点，然后依次访问它的所有子节点，再依次访问子节点的子节点，以此类推，直到遍历完整棵树
----------------------------------------------
** Depth-First Search **
    DFS深度优先搜索是一种在图中遍历节点的算法。
    它从图中的某个起始节点开始，沿着路径尽可能深地探索图的分支，直到到达最深的节点，然后回溯并继续探索其他分支。
** Breadth-First Search **
    BFS度优先搜索是一种在图中遍历节点的算法。
    它从图中的某个起始节点开始，依次访问其所有的相邻节点，然后再逐层地向下探索其他节点。
----------------------------------------------
DFS-DFT BFS-BFT 思想都是一样的
