/***各种数据类型之间的转换***/
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
/**Primitive Types原始数据类型**/
    boolean: 表示真值true或false。
    byte: 8位，有符号，范围从-128到127。
    short: 16位，有符号，范围从-32,768到32,767。
    char: 16位，无符号，范围从0到65,535（用于存储字符）。
    int: 32位，有符号，范围从-2^31到2^31-1。
    float: 32位，IEEE 754浮点数。
    long: 64位，有符号，范围从-2^63到2^63-1。
    double: 64位，IEEE 754浮点数。
/**Reference Types引用数据类型**/
    String: 字符串。
    Array：(静态)数组
        int[]、String[]、char[]等
    List：集合，允许重复的元素
        ArrayList：动态数组
        LinkedList：链表
    Set: 不允许重复的元素的集合
        HashSet：不允许集合中有重复的元素，且元素是无序的
        LinkedHashSet
        TreeSet
    Map: 键值对的集合，键不允许重复
        HashMap：哈希表
        LinkedHashMap
        TreeMap
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
/**自动类型转换**/
    小容量类型可以自动转换为大容量类型(大容量自动容纳小容量)
    如int自动转换为long、float转换为double。
    int i = 100;
    long l = i;
    double d = l;
    float f = 1.2;
    double d = f;
/**强制类型转换**/
    大容量类型转换为小容量类型时，需要显式转换，可能导致精度丢失或溢出。
    double d = 100.04;
    long l = (long) d; //double更大
    int i = (int) l;
/**容量从小到大进行排序**/
    byte: 8位，有符号，范围从-128到127。
    short: 16位，有符号，范围从-32,768到32,767。
    char: 16位，无符号，范围从0到65,535（用于存储字符）。
    int: 32位，有符号，范围从-2^31到2^31-1。
    float: 32位，IEEE 754浮点数。
    long: 64位，有符号，范围从-2^63到2^63-1。
    double: 64位，IEEE 754浮点数。
    以上全是Primitive Types，再加一个boolean就全了
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
/** String->原始数据类型 **/
    使用每个包装类的parseXXX方法或valueOf方法。
    int i = Integer.parseInt("123");
    double d = Double.parseDouble("123.45");
/** 原始数据类型->String **/
    使用String.valueOf方法或简单的字符串连接。
    String str1 = String.valueOf(123);
    String str2 = 123 + "";
        123是一个整数（int类型），而""是一个空字符串。
        当一个整数和一个字符串通过+运算符连接时，整数会先被转换成字符串，然后两个字符串会被拼接在一起。
        因此，str2的内容将会是字符串"123"。
----------------------------------------------------------------------------------
/** String->char[] **/
    使用String类的toCharArray()方法将字符串转换为char[]数组。
        String str = "hello";
        char[] chars = str.toCharArray();
/** char[]->String **/
    直接new String(chars)
        这个方法对于char[]是可以用的，但是对于int[]不可以
        char[] chars = {'H', 'e', 'l', 'l', 'o'};
        String str = new String(chars);
    或者.valueOf()方法
        String str = String.valueOf(chars);
        对于int[],这样str其实不是"123",而是一个内存地址
    toString()：返回数组内容的字符串表示形式。
                可以在需要快速查看数组内容或进行调试时使用...用处很多
                int[] arr = {1, 2, 3};
                String str = Arrays.toString(arr); // 返回"[1, 2, 3]"
/** String[]->String **/
    拼接：
        String[] strs = {"11","aa"};
        StringBuilder sb = new StringBuilder();
        for (String str : strs) {
            sb.append(str);
        }
        System.out.println(sb.toString());
----------------------------------------------------------------------------------
/** String->List<Character> **/
    手动遍历，字符串的每个字符并添加到List中。
        String str = "hello";
        List<Character> list = new ArrayList<>();
        for(char c : str.toCharArray()) {
            list.add(c);
        }
    分割，使用String类的split()方法和Arrays.asList()
        String str = "a,b,c";
        List<String> list = Arrays.asList(str.split(","));
/** List<Character>->String **/
    List<Character> charList = new ArrayList<>();
    charList.add('H');
    charList.add('e');
    //1
    StringBuilder sb = new StringBuilder();
    for (char ch : charList) {
        sb.append(ch);
    }
    String str = sb.toString();
    //2
    String str = "";
    for (char ch : charList) {
        str += ch;
    }
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/** array->List **/
    1.遍历数组并添加到集合
    2.Arrays.asList()
        String[] array = new String[]{"a", "b", "c"};
        List<String> list = Arrays.asList(array);
        asList()接受泛型参数，所以单个输入也可以
/** List->array **/
    使用集合的toArray方法
    String[] array2 = list.toArray(new String[0]);
        new String[0]是创建了一个长度为0的String数组实例。
        这个空数组作为toArray方法的参数，其目的是指示toArray方法返回一个String类型的数组。
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
















