/***Java Core***/
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/** OOP **/
    Object Oriented Programming
    [Driven by object] It is a programming mechanism that is driven by object.
    Concepts
        1.Encapsulation
            Hiding the data and implement details. And restrict direct access to an object's internal properties and behavior. And functionality can be exposed by public interface.
            用于限制对对象内部状态和行为的直接访问，可以通过公共接口暴露功能.
            访问修饰符：
                通过使用访问修饰符（如 public, private, protected）来限制对某些组件的直接访问
                分类：
                   public void withdraw(){}             公共方法，可被任何对象访问
                   protected void printBalance() {}     受保护的方法，只能被同一个包内的类或子类访问access
                   private void logTransaction() {}     私有方法，仅在类内部使用
                Ex.
                    class BankAccount {
                        // 私有属性，外部代码不能直接访问
                        private double balance;
                        // 构造函数，用于创建账户实例并初始化余额
                        public BankAccount(double initialBalance) {balance = initialBalance;}
                        // 公共方法，允许外部代码存款
                        public void deposit(double amount) {...}
                        // 公共方法，允许外部代码取款
                        public void withdraw(double amount) {...}
                        // 公共方法，允许外部查询当前余额，但不能直接修改它
                        public double getBalance() {return balance;}}
                        BankAccount 类通过其公共接口（方法）暴露功能，而内部实现细节（如余额如何改变）以及数据余额则被隐藏。
                        这样，外部代码只需关心如何使用这些公共方法，而不用担心这些方法背后的具体逻辑是如何实现的。
                        封装的真正力量在于它能够防止外部代码“直接”访问和修改内部状态。
        2.Inheritance
            inheritance means one class derives from another class and acquires all the properties and functionality(except private val method) of the derived class
        3.Polymorphism
            An object has multiple states. polymorphism has two main forms static polymorphism and dynamic polymorphism. static-overload dynamic-override.
            Overload happens when a class or interface defines multiple methods with the same name but different parameters.
            override is happens when a subclass inherits from a superclass. which allowing the subclass to override the method from the superclass and implements its unique functionality."
            分类:
                静态多态
                    也称为方法重载Overload
                动态多态
                    也称为方法重写Override
        4.Abstraction
            Implement from abstract class or interface, they defined the behavior of objects and dont need to achieve implement details.
            通过使用抽象类和接口来实现的，这些类和接口描述了对象的行为，而不需要完全实现所有的功能
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/** Interface **/
    接口是一个完全抽象的类fully abstract class，它允许声明一组方法allows for the declaration of a set of methods，但不提供它们的实现。
    接口是定义一套规范的方式，它告诉实现它的类必须实现哪些方法The interface dictates which methods must be implemented by the classes that implement it.。
    Java 8之后，接口中可以有默认实现default implementation和静态方法static method。
    当一个类实现一个接口时，这个类被要求实现接口中的所有抽象方法。
    接口中的方法默认是public和abstract的，即使没有显式地标注为abstract。这是Java接口的一个基本特性
    实现一个接口中的抽象方法时，必须要严格按照抽象方法的定义来实现。这包括参数的数量、类型，以及返回值类型都必须与接口中抽象方法的定义一致

/** Functional interface函数式接口 **/
    What is:
        Functional interfaces have one and only one abstract method;
        In Java 8, they can contain default methods and static methods.
            1.默认方法是接口中带有默认实现的方法，它们使用default关键字标记。默认方法允许开发者在不破坏已有代码的情况下，向接口添加新的功能，因为已经实现该接口的类不需要强制覆盖这些方法。
              Default methods allow developers to add new functionality to an interface without breaking existing code, because classes that already implement the interface do not need to override default methods.
            2.接口的静态方法可以被接口直接调用，不需要一个接口的实例，且不能被实现该接口的类或者对象所调用
              Static methods of an interface can be directly called by f-interface without an instance, and they cannot be called by classes or objects that implement the interface.
    一般都有 @FunctionalInterface 这个标注
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/** Abstract class **/
    抽象类可以包含具体实现的方法和抽象方法。
    抽象类是用来捕捉子类的通用特性的类。它不能被实例化instantiated，只能被其他类继承。
    特点：
        包含构造方法：抽象类可以有构造方法，这些构造方法在子类实例化时被调用。
        可以包含已实现的方法：抽象类可以包含已实现的方法（具体方法），也可以包含抽象方法（没有实现体的方法）。
        支持成员变量：抽象类可以有成员变量，这些变量可以是非静态的，也可以是静态的。
        继承限制：一个类只能继承一个抽象类，因为Java不支持多重继承。
-------------------------------------------------------------------
* Abstract class VS interface *
    Abstract classes can have non-abstract methods, and interfaces can include default methods and static methods starting from Java 8.
    A class can implement multiple interfaces, but can only inherit from one abstract class.
    Methods and variables in interfaces are by default public, while members in abstract classes can have any access level.
    Abstract class can implement an interface. But interface can’t extends an abstract class.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/** Overloading **/
    Method call is determined at compile time
    重载是指在同一个类中有多个同名方法multiple methods with the same name，但这些方法的参数列表不同（参数的数量、类型或者二者都不同）。
    重载使得你可以给多个功能相似但又不完全相同的方法以相同的名字。
    // 方法重载示例
    public class DemoClass {
        public void display(int a) {
            System.out.println("Got Integer data.");
        }
        public void display(String a) {
            System.out.println("Got String data.");
        }
    }
-------------------------------------------------------------------
/** Overriding **/
    Method call is determined at runtime
    重写是指子类subclass中定义了一个方法，该方法与父类中某个方法具有相同的名称，参数列表parameter list，返回类型return type。
    通过重写，子类能够提供一个特定实现specific implementation，覆盖override父类中提供的相同方法。Same method signature,
    重写发生在继承体系inheritance hierarchy内部，是一个运行时的概念runtime concept。
    class ParentClass {
        public void display() {
            System.out.println("Display in parent class.");
        }
    }
    class ChildClass extends ParentClass {
        // 重写 ParentClass 中的 display() 方法
        @Override
        public void display() {
            System.out.println("Display in child class.");
        }
    }
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/** Constructor **/
    [initialize a class object] Constructor is used to initialize an object of a class.
    Features:
        [Same name with class] It has the same name as the class.
        [No return type] it has no return type
        [Automatic calling] When an object is created by the new keyword, the constructor is automatically called.
        允许有多个有参构造器，也就是构造器也存在重载
        如果没有在类中显式定义任何构造函数，Java 编译器将为类提供一个没有参数的默认构造函数。一旦你定义了任何构造函数，这个默认的构造函数就不会自动提供。
    2 types of constructor
        Default type: without any params, i.e. public Person() {}
        Parameterized type. E.g. public Person(int age, String name) {}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/** HashMap VS HashTable **/
    1.1.HashTable 是线程安全的，所有的方法都是同步的； thread-safe
    1.2.HashMap 不是线程安全的，多线程环境下使用 HashMap 需要额外的同步措施。但是 HashMap 的性能更好。 non-thread-safe
    2.1.HashTable 不允许键和值为 null，如果试图插入 null 键或值，将抛出 NullPointerException 异常。 null ket is not allowed
    2.2.HashMap 允许键和值为 null  allowed null key
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/** HashMap VS HashSet **/
    1.  HashSet implements the Set interface
        HashMap implements the Map interface
    2.  HashSet stores single column element
        HashMap stores key & value pairs
    3.  HashSet doesn't support duplicate elements
        HashMap doesn't support duplicate key but support duplicate value
    4.  HashSet permits to have a single null value.
        HashMap permits single null key and any number of null values.
    5.  Both HashMap and HashSet are not thread-safe
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/** anonymous inner class **/
    Definition: 匿名内部类定义在方法里或者构造器内的类，是一种特殊的局部内部类,匿名内部类不需要为这个类声明名字
    Advantages: 匿名内部类用于更方便的创建一个子类和子类对象
    Use case: 作为一个参数parameter传递给方法
    Ex：
        public class Test{
            public static void main(String[] args){
                // 如果想使用Animal类的cry方法，本来是一定要create subclass然后implement cry()的
                // 但是这里使用anonymous inner class就可以直接跳过subclass使用cry()
                // 1.This anonymous inner class will be compile into a subclass
                // 2.Immediately create an object of subclass
                // So this class is not only a subclass but also an object
                new Animal(){
                    @Override
                    public void cry(){
                        System.out.println("cry");
                    }
                }
                // So you can Animal a = new Animal(){...}
                // Use object to invoke cry(); a.cry();
            }
        }
        abstract class Animal(){
            public abstract void cry();
        }
-------------------------------------------------------------------
/** Lambda **/
    JDK8开始新增的一种语法形式，用于简化anonymous inner class的写法
    Ex:
        原写法：
            Arrays.sort(strs,new Comparator<String>(){
                        @Override
                        public int compare(String a, String b){
                            String order1 = a + b;
                            String order2 = b + a;
                            return order2.compareTo(order1);
                        }
                    });
        Lambda写法：
            // (被重写方法的形参列表) -> {被重写方法的方法题代码}
            Arrays.sort(strNums, (String a , String b) -> { return (b + a).compareTo(a + b);} );
            // Lambda简化写法
            Arrays.sort(strNums, (a, b) -> (b + a).compareTo(a + b));
                1.参数类型可以不写
                2.如果只有一个参数，可以不写()
                3.如果方法体只有一行代码，可以不写{},同时要省略;分号
                4.同时如果这行方法体是return语句，可以省略return
        注意事项：
            Lambda不能简化所有anonymous inner class的写法，只能"简化函数式接口"的anonymous inner class
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/** Collection **/
    是一个泛型接口，表示单列集合
    /* 其下接口 */：
        1.List<E>
            特点：
                添加的元素是有序的、可重复的、有索引的 Maintain the element in the insertion order, can be repeated, and have indices.
            实现类：
                ArrayList<E>
                LinkedList<E>
        2.Set<E>
            特点：
                添加的元素是无序的、不重复的、无索引的
                但是实现类LinkedHashSet<E>和TreeSet<E>是有序的
            实现类：
                HashSet<E>  无序、不重复、无索引  HashSet<String> set = new HashSet<>();
                    LinkedHashSet<E>   有序、不重复、无索引
                TreeSet<E>  按照大小默认升序排序、不重复、无索引
    /* Collection常用方法 */
        这些方法List<>和Set<>都能用
        .add(E e)   添加元素
        .clear()    清空元素
        .isEmpty()  判断集合是否为空
        .size()     获取集合大小
        .contains(Object obj)   判断集合中是否包含元素obj,区分大小写
        .remove(E e)   删除某个元素,如果有多个重复元素，默认删除前面的第一个
        .toArray()  把集合转换成数组
        c1.addAll(c2)           把集合c2的内容倒入另一个集合c1中,也就是c1原来的数据+c2的数据。这两个集合的数据类型需要是一样的
    /* Traversal */
        1.iterator迭代器
            专门用来遍历collection的专用方式
            iterator语法
                .iterator()         获取iterator
                boolean hasNext()   询问当前位置是否有元素存在，存在return true
                .next()             获取当前位置的元素，并同时将迭代器对象指向下一个元素处
            iterator_Ex.
                Collection<String> c = new ArrayList<>();
                while(c.hasNext()){
                    System.out.println(c.next());
                }
        2.for-each
            既可以用来遍历collection，也可以来遍历数组
            语法
                for(Type value_name : array(Collection)){}
        3.Lambda Expression
            JDK8新特性
            语法
                default boid forEach(Consumer<? super T> action)
            Ex.
                Collection<String> c = new ArrayList<>();
                //原写法
                c.forEach(new Consumer<String>(){
                    @Override
                    public void accept(String s){
                        System.out.println(s);
                    }
                });
                //用Lambda写法
                c.forEach(s -> System.out.println(s));
                //写成上面这样就可以了，下面这个对我的水平来说超纲了
                //前后对象一样，继续简化  ::表示引用  这个对象引用println这个方法
                c.forEach(System.out::println);
-------------------------------------------------------------------
/** List **/
    常用方法
        List<Integer> list = new ArrayList<>();     创建List，经常用到，推荐这么写
        .add(int index, E e)                        插入元素,void
        .remove(int index)                          删除元素,并返回被删除元素(用不用这个元素看场景)
        .get(int index)                             返回指定元素
        .set(int index,E e)                         修改特定位置处的元素，修改成功后会return原来的数据
    遍历方法
        for()
        for-each()
        iterator
        forEach() Lambda
    ArrayList vs LinkedList
        They are both implementation classes of List interface
        ArrayList Feature：
            有序、有重复、有索引
            ArrayList是基于array实现的，数据是内存中的一块连续区域 Underlying implementation uses an array which is a continuous memory.
            查询快，增删相对慢 Fast access but slow on modification (insert/delete)
            使用无参constructor构造的ArrayList会默认创建一个长度为0的array List<String> list = new ArrayList<>();
            添加第一个元素时，会创建一个新的长度为10的数组
            存满时，会扩容1.5倍
            如果批量添加元素(.addAll())，会创建一个对应长度的数组
        LinkedList Feature:
            有序、有重复、有索引
            LinkedList是基于双链表实现的  Underlying implementation uses double linked list which is not continuous memory.
            查询慢，增删相对快，对首尾的增删改查速度是最快的 Slow access but fast on modification (insert/delete)
            LinkedList对首尾操作的方法
                .addFirst(E e)  在开头插入指定元素
                .addLast(E e)   在末尾插入指定元素
                .getFirst()     返回第一个元素
                .getLast()      返回最后一个元素
                .removeFirst()  删除第一个元素并返回这个元素
                .removeLast()   删除最后一个元素并返回这个元素
                indexOf(Object o): 返回指定元素首次出现在链表中的索引。
                lastIndexOf(Object o): 返回指定元素最后一次出现在链表中的索引
            LinkedList使用场景
                设计queue队列(先进先出)
                设计stack栈(后进先出)
                    List<Integer> stack = new LinkedList<>();
                    //push
                    stack.addFirst(1);
                    stack.addFirst(2);
                    stack.addFirst(3);
                    //pop
                    System.out.println(stack.removeFirst());
                    //输出是1 2
-------------------------------------------------------------------
/** Set **/
    常用方法
        Set<String> set = new HashSet<>();  创建一个hashset，经典写法
    Hash Value
        hash value 是一个int类型的数据，java中每个对象都有一个hash value
        每个对象都可以调用hashCode()方法返回自己的hash value，且hash value是固定的
        不同对象的hash value可能相同，就是Hash Collision
    HashSet
        其实HashSet就是基于HashMap实现的，只是Set中的元素只要了key，不要value
        无序、不重复、无索引
        基于Hash table实现
        增删改查性能都很好
        JDK8之前 hash table = array + linkedlist
            结构： 19:00 link->   https://www.bilibili.com/video/BV1Cv411372m?p=140&spm_id_from=pageDriver&vd_source=db36d19643c35aa99685934506516717
        JDK8之后 hash table = array + linkedlist + red black tree
            解决链表过长，导致查询性能降低这个问题
            当linkedlist长度超过8，且array长度超过64，自动将linkedlist转成红黑树
        LinkedHashSet
            有序、不重复、无索引
            有序是因为，每个元素都额外多了一个双链表的机制，记录该元素的前后元素的位置
            基于hash table实现
    TreeSet
        排序、不重复、无索引
        排序通过红黑树实现排序
        对于基本数据类型int double等，按照数值大小进行升序排序
        对于字符串类型，按照首字符的编号升序排序
        对于自定义类型，无法直接排序
            所以treeset在存储自定义类型的对象时，必须指定排序规则
                1、让自定义的类实现Comparable接口，实现里面的compareTo方法来指定比较规则
                    class Student implements Comparable<>{
                        @Override
                        compareTo(){...}
                    }
                    a.compareTo(b){}
                        如果认为a>b，返回正整数；如果认为a<b，返回负整数；如果认为a=b，返回0；
                        所以override compareTo方法就是写怎么return来告诉怎么排序
                2、通过调用treeset集合有参构造器，通过anonymous_inner_class，将Comparator对象作为参数传入treeset
                    TreeSet(Comparator<? super E> comparator)
                    Set<Student> student = new TreeSet<>(
                        new Comparator<Student>(){
                            @Override
                            public int compare(Student d1,Student d2){
                                return Double.compare(d1,d2);//对于double类型，直接调用Double.compare方法就会返回整数，因为compare要求返回整数
                                //如果d1>d2,那么返回1，也就是告诉compare，d1排在d2后面
                            }
                        });
                        //用Lambda简化
                        Set<Student> student = new TreeSet<>((d1,d2) -> Double.compare(d1,d2));
-------------------------------------------------------------------
* List vs Set *
    They are implementation classes of Collection interface.
    List maintain the element in the insertion order, can be repeated, and have indices.
    Set,no any order,can not be repeated, have no indices
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/** Map **/
    双列集合(键-值对)接口
    /* 其下实现类 */
        HashMap<K,V>    无序、不重复、无索引
            LinkedHashMap<<K,V>     有序、不重复、无索引
        TreeMap<K,V>    按照大小升序排序、不重复、无索引
    /* 常用方法 */
        Map<Integer,Integer> map = new HashMap<>()  创建HashMap
        map.size()                                  集合大小
        map.clear()                                 清空map
        map.isEmpty()                               判断是否为空
        map.get(key)                                获取key对应的值，如果key存在返回值，如果key不存在返回null
        map.remove(key)                             删除整个键值对，并返回删除的key的balue
        map.containsKey(key)
        map.containsValue(value)
        map.keySet()                                获得map的所有key，用set()返回
        map.values()                                获得map的所有value，用collection返回
        map.pullAll(map2)                           把map2的内容倒进map中，map的元素就变多了。如果map和map2有重复key，那么map2key的value 覆盖 map key的value
    /* map travesal method */
        1、获取key，遍历key
        2、Lambda遍历(JDK8新出现的，非常简单)
            模板
                default void forEach(BiConsumer<? super K, ? super V> action)
            Ex.
                Map<String, Double> map = new HashMap<>();
                map.forEach((k,v) -> System.out.println(k + "->" + v));//这个方法直接用,已经是一种固定写法了
    /* HashMap */
        基于Hash Table实现
        其实HashSet就是基于HashMap实现的，只是Set中的元素只要了key，不要value
        JDK8之前 hash table = array + linkedlist
        JDK8之后 hash table = array + linkedlist + red black tree
        Map<Integer,Integer> map = new HashMap<>()  创建HashMap
    /* HashTable */
        HashTable 是早期 Java 类库中提供的类，它实现了 Map 接口并继承自 Dictionary 类
        HashTable 是线程安全的，所有的方法都是同步的，即它是线程安全的集合类
    /* LinkedHashMap */
        其实LinkedHashSet就是基于LinkedHashMap实现的，只是Set中的元素只要了key，不要value
    /* TreeMap */
        TreeSet
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/** Hash **/
    * Hash Function *
        概念
            是一种从输入数据(key)到固定大小的数值(Hash value)的映射
        设计原则
            确定性：相同的输入总是产生相同的输出。
            高效计算：散列函数的计算过程应当高效快速，以便能够迅速处理大量数据。
            均匀分布：理想的散列函数应该将任何一组输入均匀分布到所有可能的散列值上，以减少碰撞（两个不同输入值产生相同散列值的情况）。
            抗碰撞性（对于加密散列函数）：对于任意已知的输出，应该计算上不可行找到对应的输入（即单向性）。
        应用
            Hash Tables
                散列函数用于散列表中，是实现快速数据查找的关键。例如，Python 的字典（dict）和 Java 的 HashMap 都是基于散列表实现的。
            数据校验：
                散列函数常用于校验数据完整性。常见的用途包括验证下载文件是否损坏，或者检查数据在传输过程中是否被篡改。
            加密和安全：
                加密散列函数（如 MD5, SHA-1, SHA-256）在密码存储、数字签名、数据完整性验证中扮演着重要角色。它们帮助保证数据的机密性和完整性，防止未授权的信息访问。
            负载均衡：
                在网络服务中，散列函数可以帮助决定将客户端请求路由到哪个服务器，以均匀地分配负载。
            唯一标识：
                散列函数可以从大量数据生成短小的唯一标识，例如在大数据处理和快速数据查找中生成唯一的键值。
            随机化算法：
                散列函数在一些算法中用来保证算法的随机性和公平性，如在随机化快速排序和蒙特卡洛方法中。
    * Hash Collision *
        概念：
            Hash collision is that multiple keys are hashed to the same index.
            Hash Collision是指当两个或多个不同的键被哈希函数映射到了同一个索引或哈希码上的情况。
            这种情况在哈希表中是非常常见的，因为哈希函数将一个大的键空间映射到了一个较小的索引空间，从而导致了可能性的重叠。
        解决Hash Collision
            1.链表法（Chaining）：
                creating a linked list of entries at the index, and the new element is added to the end of the list at that index.
                每个散列槽指向一个链表。所有映射到该散列槽的元素都将存储在这个链表中。当查找、插入或删除元素时，需要遍历链表以找到目标元素。
            2.开放寻址法（Open Addressing）：
                seeks an empty slot within the hash table itself.
                当发生碰撞时，寻找另一个空的散列槽来存储这个值。常见的开放寻址技术包括线性探测、二次探测和双重散列。
        Hash Collision带来的问题
            性能降低：在散列表中，碰撞增加了查找和存储数据的时间，特别是链表法中，链表越长，性能问题越明显。
            安全隐患：在安全敏感的应用中，敌手可能利用散列碰撞来进行拒绝服务攻击（例如，通过故意创建大量碰撞来降低系统的响应能力）。
    Hash使用场景
        要快速判断一个元素是否出现集合里的时候，就要考虑哈希法。
        需要判断一个元素是否出现过的场景也应该第一时间想到哈希法。
---------------------------------------------------------------
Hashcode() vs equals()
    Hashcode generating an integer type hash code for an object.
    equals compare two objects for equality and returns a boolean value.
    Note:
        If two objects are equal, then their hashCode are same.
        If their hashcode are same, it doesn't mean that they are equal.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/** Generics泛型 **/
    泛型类：
        T是一个类型参数，代表实际的类型，它将在创建Box对象时被实际的类型（如Integer、String等）替换。
        class Box<T> {
            private T t;
            public void set(T t) {this.t = t;}
            public T get() {return t;}}
    泛型方法：
        方法使用了类型参数T，可以接受任意类型的数组，并返回数组中间的元素
        public class Util {
            public static <T> T getMiddle(T[] a) {
                return a[a.length / 2];
            }
        }
    泛型接口
        接口使用了两个类型参数K和V，分别代表键和值的类型
        interface Pair<K, V> {
            public K getKey();
            public V getValue();
        }
    Adv:
        Java泛型是使用擦除来实现的。这意味着在编译时，所有的泛型信息都会被擦除，转换成原始类型（raw types）。
        编译器会在必要的地方自动插入类型转换代码。例如，Box<Integer>和Box<String>在运行时实际上都是Box类型。
        类型安全：泛型提供编译时的类型检查，任何不合法的类型都会在编译期被检测出来，减少运行时的类型错误。
        消除类型转换：使用泛型不需要强制类型转换，代码更加清洁，易读。
        增强程序的可读性和稳定性：泛型代码通过显式的类型标签，使得代码更易于理解。同时，泛型实现的算法能够应用于多种类型，提高了代码的重用率。
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/** StringBuilder **/
    显著减少内存的使用和提升程序性能：
        因为String对象是不可变的，每次拼接操作都会创建一个新的String对象，这在循环或频繁操作时会导致大量的内存分配和回收，增加垃圾收集器的负担。
        而StringBuilder是可变的，可以在现有的字符序列上添加或修改内容，避免了创建多余的对象。
    易用性：
        StringBuilder提供了多种方法来追加（append）、插入（insert）、删除（delete）、反转（reverse）等操作字符串，使用起来非常灵活方便。
    线程安全性：
        与StringBuffer相比，StringBuilder是非线程安全的。
        这意味着在单线程环境下，StringBuilder的性能要优于StringBuffer，因为它不涉及同步处理。
    常用方法
        append()：
            用于向 StringBuilder 的末尾添加文本。这个方法有多个重载版本，可以接受不同类型的输入，包括 String、char、int、long、float、double 等。
            示例：sb.append("text");
        insert()：
            用于在指定位置插入文本。和 append() 方法一样，insert() 也有多种重载版本，可以插入不同类型的数据。
            示例：sb.insert(0, "start"); 在开头插入 "start"。
        charAt(int index) 和 setCharAt(int index, char ch)：
            charAt(int index) 获取指定位置的字符。
            setCharAt(int index, char ch) 设置指定位置的字符。
            示例：sb.setCharAt(0, 'N'); 将第一个字符设置为 'N'。
        delete() 和 deleteCharAt()：
            delete(int start, int end) 用于删除从 start 索引开始到 end 索引前的字符序列。
            deleteCharAt(int index) 用于删除指定位置的字符。
            示例：sb.delete(1, 3); 删除从索引 1 到索引 2 的字符。
        replace()：
            用于替换指定范围内的字符序列。
            示例：sb.replace(1, 3, "new"); 将索引 1 到 2 的字符替换为 "new"。
        toString()：
            将 StringBuilder 的内容转换为 String。
            示例：sb.toString();
        reverse()：
            将 StringBuilder 中的字符序列反转。
            示例：sb.reverse();
        length()：
            返回 StringBuilder 中的字符数。
            示例：sb.length();
        capacity()：
            返回 StringBuilder 当前的容量（即可以存储的字符数，不必进行再分配）。
            示例：sb.capacity();
        setLength(int newLength)：
            设置 StringBuilder 的长度。如果指定的长度小于当前长度，字符将被截断；如果指定的长度大于当前长度，将在末尾添加空字符。
            示例：sb.setLength(5);
-------------------------------------------------------
 /** StringBuilder vs StringBuffer **/
    StringBuilder快
    StringBuffer线程安全
        线程安全：
            StringBuffer 是线程安全的thread-safe
                这意味着它的所有公共方法都是同步的，可以在多线程环境中安全使用，不会出现线程冲突hread conflict。
                StringBuffer 在内部使用 synchronized 关键字来保证线程安全。
            StringBuilder 不是线程安全的
                它的方法不是同步的，因此在多线程环境中，多个线程同时修改 StringBuilder 实例可能会导致不一致的行为或数据损坏。
                由于去除了线程同步的开销，StringBuilder 在单线程环境下通常比 StringBuffer 更快。
        性能：
            StringBuilder 通常比 StringBuffer 快，因为它避免了线程同步的开销。
        使用场景：
            如果你的应用程序需要在多线程环境中操作可变字符序列，那么使用 StringBuffer 是一个安全的选择。
            如果是在单线程环境中或者不需要考虑线程安全的情况下，推荐使用 StringBuilder，因为它提供了更好的性能。
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/** Final vs Finally vs Finalize() **/
    *Final*
        [Reserved keyword] It is a reserved keyword in Java.
        [Class, method, var] Final is used on Class, method, and variable.
            [class] A final class can’t be inherited
            [method] A final method can’t be overridden
            [variable] A final variable value can’t be re-set.
    *Finally*
        [Used with java exception] It is used in java exception handling, normally placed after the catch block.
        [Always being executed] It will always be executed no matter if the exception is handled or not.
    *Finalize*
        [Garbage collection method] perform cleanup method before objects are being destroyed
            finalize() 方法提供了一种在对象被垃圾回收前进行清理的机制
            finalize() 方法是一个空方法，即默认的实现是空的
            垃圾收集器会在将对象释放内存之前调用该对象的 finalize() 方法

-------------------------------------------------------
* garbage collection *
    Garbage collection (GC) is a mechanism for automatic memory management.
    Garbage collector counts the references to objects. When the number of references to an object becomes 0, the collector will recycle the memory.
    Java 7 引入了 try-with-resources，以确保资源的正确关闭
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/** 异常和错误 **/
    Exception Handling
        Exception handling allows developers to manage errors and exceptional situations that occur during program execution
    *异常类层次*
        所有的异常和错误类型都派生自 Throwable 类
        子类：
            1.Exception:
                这是程序正常运行中可以预料的异常情况，应该被捕获并适当处理。
                例如，试图在空数组上索引或文件未找到等。
                分类:
                    1.1.Checked Exceptions
                        Checked Exceptions must be handled at compile time(like be caught or declared to be thrown), otherwise (the compiler) will report an error
                        这些异常在编译时必须被处理（捕获或声明抛出），否则编译器将报错
                        例如，IOException 和 SQLException。
                    1.2.Unchecked Exceptions
                        Unchecked Exceptions do not need to be handled at compile time.
                        这些异常在编译时不需要显式处理，它们通常是编程错误的结果
                        如 NullPointerException 和 IndexOutOfBoundsException。
                Exception Keyword:
                    a.try block
                        用于包围有可能发生异常的代码。如果在 try 块内发生了异常，那么异常可以被捕获并由 catch 块处理
                    b.catch block
                        捕获 try 块中发生的异常，并为它们提供处理逻辑。可以有多个 catch 块来捕获不同类型的异常
                    c.finally block
                        无论是否发生异常，finally 块中的代码总是被执行;即使 catch 块中存在 return 语句，finally 块中的代码仍将执行
                        用来执行重要的清理操作
                            关闭文件流（InputStream, OutputStream）
                            释放数据库连接
                            释放网络连接
                            清理任何其他资源
                    d.try-with-resources
                        自Java7开始，这种结构可以自动管理资源（如文件或数据库连接），确保在try块执行完毕后自动调用资源的close()方法
                常见Exception Type:
                    IOException：涉及输入输出操作失败或中断，如文件读写操作。
                    SQLException：处理数据库访问错误时使用。
                    ClassNotFoundException：指定的类不存在时抛出。
                    InterruptedException：线程在活动之前或之中被中断时抛出。
                    NullPointerException：尝试使用 null 对象引用进行操作时抛出。
                    IndexOutOfBoundsException：尝试访问数组或字符串的非法索引时抛出。
                    ArithmeticException：异常的算术条件，如除以零。
            2.Error:
                这类错误表示严重的问题，通常是 Java 运行时系统的错误，不应该被应用程序尝试捕获。
                例如，OutOfMemoryError 或 StackOverflowError
                常见Error Type:
                    OutOfMemoryError：JVM没有足够的内存继续执行。
                    StackOverflowError：应用递归过深，栈空间耗尽。
                    NoClassDefFoundError：JVM 或 ClassLoader 实例尝试加载（在其路径中预先指定的）类时未找到类定义。
                    AssertionError：当断言失败时抛出
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/** Assertion断言 **/
    Assertion是一种调试辅助技术，它允许开发者在代码中设置检查点。
    只有当特定的条件（即断言）为真时，程序才会正常继续执行；如果条件为假，程序则抛出错误或异常，通常会导致程序终止
    Ex.
        public class TestAssertions {
            public static void main(String[] args) {
                int value = -5;
                assert value >= 0 : "Value must be non-negative";
                System.out.println("Value is " + value);
            }
        }
        在这个例子中，断言检查 value 是否为非负数。
        如果 value 是负数，断言将失败，并抛出一个 AssertionError，错误信息为 "Value must be non-negative"。
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
** multithreading **
    How to implement
        1.Subclass the Thread class and override its run() method to create a new thread class.
          Then,create an instance of this class and use the start() method to start the thread.
        2.Implement the Runnable interface.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
** volatile **
    volatile keyword used to ensure thread safe(all writes and reads will be directly on the main memory instead of cpu cache)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
** Synchronization **
    Synchronization makes sure there is only one thread that can access a resource or a block of code at a time.
    To apply Synchronization in Java：
        1、synchronized keyword.
        2、Lock interface
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
** static **
    static可以在不创建类实例的情况下访问类成员。Static allows access to class members without creating an instance of the class.
        1. static变量（静态变量），所有实例共享同一静态变量。Static variables are shared by all instances.
        2. static方法（静态方法），可以不创建对象的情况下直接通过类名来调用。Static methods can be called directly by class name without creating an object.
        3. static代码块（静态代码块）静态代码块用于初始化类的静态变量。Static code blocks are used to initialize static variables of a class.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
** access modifiers **
    Public: can be accessed from anywhere
    Protected: can be accessed from anywhere within the same package and any subclass
    Default(Package-Private): can be access from anywhere within the same package
    Private: can be accessed only within the class
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
** generic **
    When coding allows defer specifying data type of a class, interface, or method
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
** Singleton Pattern **
    What is:
       Singleton Pattern is a common design pattern used to ensure that only one instance in the application
    Why use:
        资源共享：当多个进程需要访问相同的资源，且资源的一致状态非常重要时，单例可以确保所有的访问都通过一个实例进行。
        控制资源的访问：单例模式可以防止其他对象对其唯一实例的随意修改，从而严格控制资源。
        减少开销：如果某个实例的创建或维护成本很高，单例模式可以确保系统中只有一个实例，从而减少系统的性能开销。
        全局访问点：单例对象可以很容易地由系统的任何其他对象访问，从而方便地访问共享的资源或服务。
    Ex.
        public class Singleton {
            // 私有静态变量，保存单例实例，使用volatile保证可见性和有序性
            private static volatile Singleton instance;

            // 私有构造函数，防止外部实例化
            private Singleton() {}

            // 公共静态方法，返回唯一实例
            public static Singleton getInstance() {
                if (instance == null) { // 双重检查锁定
                    synchronized (Singleton.class) {
                        if (instance == null) {
                            instance = new Singleton();
                        }
                    }
                }
                return instance;
            }
        }
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
**  == VS .equals() **
    ==
        1. used for content comparison of primitive data types
        2. for reference comparison to check whether two references point to the same object in memory.
    equals()
        used for content comparison（except array)
            array use Arrays.equals() for content comparison
            equals.() for array is used for comparison of object memory


